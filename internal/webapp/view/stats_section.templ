package view

import (
	"fmt"
	"github.com/deseteral/resistere/internal/metrics"
	"github.com/invopop/ctxi18n"
	"github.com/invopop/ctxi18n/i18n"
	"time"
)

templ StatsSection(m *metrics.Registry) {
	<fieldset
		id="stats-section"
		hx-get="/view/stats"
		hx-trigger="load delay:5s"
		hx-swap-oob="true"
	>
		<legend>{ i18n.T(ctx, "statistics.tab_title") }</legend>
		<div>
			<style>
				me {
					display: flex;
					flex-direction: column;
				}
			</style>
			<div class="field-array">
				<div>{ i18n.T(ctx, "statistics.power_production") }:</div>
				<div>{ fmt.Sprintf("%.2f", m.LatestFrame.PowerProductionWatts / 1000.0) } kW</div>
				<div>{ i18n.T(ctx, "statistics.power_consumption") }:</div>
				<div>{ fmt.Sprintf("%.2f", m.LatestFrame.PowerConsumptionWatts / 1000.0) } kW</div>
			</div>
			<div>
				<style>
					me {
						display: flex;
						flex-direction: row;
						align-items: center;
						align-self: flex-end;

						margin-top: 8px;

						font-size: 13px;
						font-variant-numeric: tabular-nums;

						i {
							margin-right: 4px;
						}
					}
				</style>
				<i class="ph-bold ph-arrows-clockwise"></i>
				{ i18n.T(ctx, "statistics.last_updated") }:&nbsp;
				<time datetime={ m.LatestFrame.Timestamp.Format(time.RFC3339) }></time>
				<script>
					(function() {
						const rtf = new Intl.RelativeTimeFormat({{ ctxi18n.Locale(ctx).Code().Base() }}, { style: "long" });

						const el = me("time");
						const time = new Date(el.getAttribute("datetime"));

						function updateTimer() {
							const diffInSeconds = -Math.floor((Date.now() - time) / 1000);
							el.innerHTML = rtf.format(diffInSeconds, "second");
						}

						if (window.statsTimerIntervalId) {
							clearInterval(window.statsTimerIntervalId);
						}

						updateTimer();
						window.statsTimerIntervalId = setInterval(updateTimer, 500);
					})();
				</script>
			</div>
		</div>
	</fieldset>
}
